There are two things I find odd about the Mapper hierarchy:\\\\a) NonTransactionalMapper extends TransactionalMapper which is semantically confusing.\\b) The Store API refers to TransactionalMappers where any Mapper (transactional or not) is appropriate. Moreover\, the Mappers inherit from TransactionalMapper two times: once via AbstractTransactionalMapper and once via Message/Mailbox/SubscriptionMapper.\\\\I&#39;d like to have it more straight forward:\\1) Have a base Mapper\, which gets implemented by a TransactionalMapper and a NonTransactionalMapper (both abstract).\\2) The Message/Mailbox/SubscriptionMapper interfaces should not care about transactions and thus not inherit at all.\\3) The implementations extend one of Transactional- or NonTransactionalMapper and implement one of Message/Mailbox/SubscriptionMapper.\\\\This way the hierarchy is clearer and function (message...) and transaction are separated.